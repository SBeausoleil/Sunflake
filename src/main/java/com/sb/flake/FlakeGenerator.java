package com.sb.flake;

import java.time.Duration;
import java.time.Instant;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * A Flake ID generator that support custom generation rules.
 * <p>
 *     Internally, all timestamps shared between methods are already masked and shifted.
 * </p>
 */
public class FlakeGenerator {
    protected final GenerationRules RULES;
    protected final Instant EPOCH;

    protected final long SHIFTED_MACHINE_ID;
    /**
     * Time in the time unit of this generator since the real epoch when this generator was instantiated.
     */
    private final long INSTANCE_START_TIME;
    /**
     * To avoid issues with leap seconds and backward flowing time,
     * this generator uses a monotonical clock.
     * Since the relation between the epoch of the clock and wall-time is unknown,
     * we maintain an internal start time of the clock to allow later establishing
     * of the actual real timestamp with the following calculation:
     * <p>
     *     <code>
     *         toTimeUnit(CLOCK_TIME - CLOCK_EPOCH) + INSTANCE_START_TIME = TIMESTAMP
     *     </code>
     * </p>
     */
    private final long CLOCK_EPOCH;
    /**
     * Previous timestamp already shifted by 41 bits
     */
    private final AtomicLong previousTimestamp;
    private final AtomicInteger sequence;

    public FlakeGenerator(Instant epoch, int workerId, GenerationRules rules) {
        int maskedId = workerId & rules.getWorkerIdMask();
        if (maskedId != workerId) {
            throw new IllegalArgumentException("Invalid workerId: " + workerId + " (too big). " +
                    "WorkerId must be a " + rules.getWorkerSize() + " bits integer.");
        }

        this.EPOCH = epoch;
        this.RULES = rules;
        this.SHIFTED_MACHINE_ID = (long) maskedId << rules.getWorkerIdShift();
        long msSinceEpoch = System.currentTimeMillis() - epoch.toEpochMilli();
        this.INSTANCE_START_TIME = rules.getTimeUnit().convert(msSinceEpoch, TimeUnit.MILLISECONDS);
        this.CLOCK_EPOCH = System.nanoTime();

        this.previousTimestamp = new AtomicLong(this.INSTANCE_START_TIME);
        this.sequence = new AtomicInteger(0);
    }

    public long nextId() {
        long id = shiftedMonotonicTime();
        if (previousTimestamp.getPlain() != id) {
            resetSequence(id);
        }
        int sequenceNumber = produceSequenceNumber();
        if (sequenceNumber < sequence.getPlain()) {
            id = awaitNextTimestamp(id);
            sequenceNumber = produceSequenceNumber();
        }
        id |= sequenceNumber;
        id |= this.SHIFTED_MACHINE_ID;
        return id;
    }

    private int produceSequenceNumber() {
        return sequence.getAndIncrement() & this.RULES.SEQUENCE_MASK;
    }

    private long shiftedMonotonicTime() {
        //System.out.println();
        long ts = System.nanoTime() - CLOCK_EPOCH;
        ts = this.RULES.getTimeUnit().convert(ts, TimeUnit.NANOSECONDS);
        //System.out.println("TS: " + ts + " (" + toUnformattedBinary(ts) + ")");
        ts += INSTANCE_START_TIME;
        //System.out.println("Adjusted ts: " + ts + " (" + toUnformattedBinary(ts) + ")");
        ts <<= this.RULES.TIMESTAMP_SHIFT;
        //System.out.println("Shifted (" + TS_SHIFT + ") ts: " + ts + " (" + toUnformattedBinary(ts) + ")");
        //System.out.println(toFormattedBinary(ts));
        ts &= this.RULES.SIGN_MASK;
        return ts;
    }

    private long awaitNextTimestamp(long tsOnArrival) {
        long ts;
        do {
            Thread.onSpinWait(); // Free some CPU resources
            ts = shiftedMonotonicTime();
        } while (ts <= tsOnArrival);
        resetSequence(ts);
        return ts;
    }

    private synchronized void resetSequence(long newTs) {
        if (newTs > this.previousTimestamp.longValue()) {
            this.previousTimestamp.set(newTs);
            this.sequence.set(0);
        }
    }

    /**
     * Parse a flake ID as if it were generated by this generator instance.
     * @param flake the flake id to parse
     * @return the components of that snowflake.
     */
    public FlakeData parse(long flake) {
        long msSinceEpoch = flake >> this.RULES.TIMESTAMP_SHIFT & this.RULES.TIMESTAMP_MASK;
        Instant timestamp = this.EPOCH.plusMillis(msSinceEpoch);
        short workerId = (short) (flake >> this.RULES.WORKER_ID_SIZE & this.RULES.WORKER_ID_MASK);
        short sequenceNumber = (short) (flake & this.RULES.SEQUENCE_MASK);
        return new FlakeData(flake, timestamp, Duration.ofMillis(msSinceEpoch), workerId, sequenceNumber);
    }

    /**
     * Isolate the components of the flake as if it were generated by this generator instance.
     * @param flake the flake id to parse
     * @return a long array where [0] is the timestamp, [1] the workerId, [2] the sequence number.
     */
    public long[] primitiveParse(long flake) {
        return new long[] {
                flake >> this.RULES.TIMESTAMP_SHIFT & this.RULES.TIMESTAMP_MASK,
                flake >> this.RULES.WORKER_ID_SIZE & this.RULES.WORKER_ID_MASK,
                flake & this.RULES.SEQUENCE_MASK
        };
    }
}
